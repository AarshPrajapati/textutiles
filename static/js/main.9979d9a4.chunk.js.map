{"version":3,"sources":["Components/Alert.js","Components/About.js","Components/Navbar.js","Components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","React","createElement","style","height","alert","class","concat","type","role","msg","About","Mystyle","color","mode","backgroundColor","border","className","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Navbar","href","title","aria-label","Link","aria-current","to","onClick","ToggleMode","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","value","onChange","event","target","rows","newtext","toUpperCase","showAlert","toLowerCase","split","filter","element","length","defaultProps","App","Mode","SetMode","_useState3","_useState4","setalert","ShowAlert","message","setTimeout","BrowserRouter","document","body","Routes","Route","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"wPAEe,SAASA,EAAMC,GAC5B,OACEC,IAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SACpBJ,EAAMK,OAASJ,IAAAC,cAAA,WACbD,IAAAC,cAAA,OAAKI,MAAK,eAAAC,OAAiBP,EAAMK,MAAMG,MAAQC,KAAK,SACjDT,EAAMK,MAAMK,OCJN,SAASC,EAAMX,GAK1B,IAAIY,EAAQ,CACRC,MAAoB,SAAbb,EAAMc,KAAc,QAAQ,QACnCC,gBAA+B,SAAbf,EAAMc,KAAc,UAAU,SAuBtD,OACEb,IAAAC,cAAA,OAAKC,MAAO,CAACa,OAAS,YAAaH,MAAmB,SAAbb,EAAMc,KAAc,QAAQ,UACnEb,IAAAC,cAAA,OAAKe,UAAU,4BAA4BC,GAAG,wBAAwBf,MAAOS,GAC3EX,IAAAC,cAAA,OAAKe,UAAU,kBACXhB,IAAAC,cAAA,MAAIe,UAAU,oBACdhB,IAAAC,cAAA,UAAQC,MAAOS,EAASK,UAAU,6BAA6BT,KAAK,SAASW,iBAAe,WAAWC,iBAAe,qBAAqBC,gBAAc,QAAQC,gBAAc,qBAAoB,sBAInMrB,IAAAC,cAAA,OAAKgB,GAAG,oBAAoBD,UAAU,8BAA8Bd,MAAOS,EAASW,iBAAe,0BACnGtB,IAAAC,cAAA,OAAKe,UAAU,kBAAiB,gFAA6EhB,IAAAC,cAAA,YAAM,oBAAuB,0DAG9ID,IAAAC,cAAA,OAAKe,UAAU,kBACXhB,IAAAC,cAAA,MAAIe,UAAU,oBACdhB,IAAAC,cAAA,UAAQC,MAAOS,EAASK,UAAU,6BAA6BT,KAAK,SAASW,iBAAe,WAAWC,iBAAe,qBAAqBC,gBAAc,QAAQC,gBAAc,qBAAoB,sBAInMrB,IAAAC,cAAA,OAAKgB,GAAG,oBAAoBD,UAAU,8BAA8BM,iBAAe,0BACnFtB,IAAAC,cAAA,OAAKC,MAAOS,EAASK,UAAU,kBAAiB,gFAA6EhB,IAAAC,cAAA,YAAM,oBAAuB,qHAG9JD,IAAAC,cAAA,OAAKe,UAAU,kBACXhB,IAAAC,cAAA,MAAIe,UAAU,oBACdhB,IAAAC,cAAA,UAAQC,MAAOS,EAASK,UAAU,6BAA6BT,KAAK,SAASW,iBAAe,WAAWC,iBAAe,uBAAuBC,gBAAc,QAAQC,gBAAc,uBAAsB,sBAIvMrB,IAAAC,cAAA,OAAKgB,GAAG,sBAAsBD,UAAU,8BAA8BM,iBAAe,0BACrFtB,IAAAC,cAAA,OAAKC,MAAOS,EAASK,UAAU,kBAAiB,gFAA6EhB,IAAAC,cAAA,YAAM,oBAAuB,6Q,YC1DvJ,SAASsB,EAAOxB,GAC7B,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKe,UAAS,kCAAAV,OAAoCP,EAAMc,KAAI,QAAAP,OAAOP,EAAMc,OACnEb,IAAAC,cAAA,OAAKe,UAAU,mBACfhB,IAAAC,cAAA,KAAGe,UAAU,eAAeQ,KAAK,KAAKzB,EAAM0B,OAC5CzB,IAAAC,cAAA,UAAQe,UAAU,iBAAiBT,KAAK,SAASW,iBAAe,WAAWC,iBAAe,0BAA0BE,gBAAc,yBAAyBD,gBAAc,QAAQM,aAAW,qBACxL1B,IAAAC,cAAA,QAAMe,UAAU,yBAEpBhB,IAAAC,cAAA,OAAKe,UAAU,2BAA2BC,GAAG,0BACzCjB,IAAAC,cAAA,MAAIe,UAAU,mCACdhB,IAAAC,cAAA,MAAIe,UAAU,YACVhB,IAAAC,cAAC0B,IAAI,CAACX,UAAU,kBAAkBY,eAAa,OAAOC,GAAG,KAAI,SAEjE7B,IAAAC,cAAA,MAAIe,UAAU,YACVhB,IAAAC,cAAC0B,IAAI,CAACX,UAAU,WAAWa,GAAG,UAAS,WAG3C7B,IAAAC,cAAA,OAAKe,UAAU,0BACbhB,IAAAC,cAAA,SAAOe,UAAU,mBAAmBc,QAAS/B,EAAMgC,WAAYxB,KAAK,WAAWC,KAAK,SAASS,GAAG,2BAChGjB,IAAAC,cAAA,SAAOe,UAAS,yBAAAV,OAAwC,UAAbP,EAAMc,KAAe,OAAO,QAAO,KAAKmB,QAAQ,0BAAyB,yBCrBvH,SAASC,EAASlC,GAC7B,IA0CAmC,EAAsBC,mBAAS,mBAAkBC,EAAAC,YAAAH,EAAA,GAA1CI,EAAIF,EAAA,GAACG,EAAOH,EAAA,GACrB,OACEpC,IAAAC,cAAAD,IAAAwC,SAAA,KACAxC,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKe,UAAU,iBAAiBd,MAAO,CAACU,MAAoB,SAAbb,EAAMc,KAAc,QAAQ,UAC3Eb,IAAAC,cAAA,UAAI,mCAAoCD,IAAAC,cAAA,WAEnCD,IAAAC,cAAA,YAAUe,UAAU,eAAeyB,MAAOH,EAAMI,SAX9B,SAACC,GAEpBJ,EAAQI,EAAMC,OAAOH,QASsDxB,GAAG,8BAA8B4B,KAAK,IAAI3C,MAAO,CAACU,MAAoB,SAAbb,EAAMc,KAAc,QAAQ,QAAQC,gBAA8B,SAAbf,EAAMc,KAAc,UAAU,WACtNb,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQe,UAAU,4BAA4Bc,QAnD7B,WAElB,IAAIgB,EAAQR,EAAKS,cACJ,KAAVD,EACD/C,EAAMiD,UAAU,mCAAmC,UAE7CV,IAAOQ,EACb/C,EAAMiD,UAAU,kCAAkC,YAGlDT,EAAQO,GACR/C,EAAMiD,UAAU,+BAA+B,cAwCsB,eACtEhD,IAAAC,cAAA,UAAQe,UAAU,4BAA4Bc,QA9B5B,WAErB,IAAIgB,EAAQR,EAAKW,cACJ,KAAVH,EACD/C,EAAMiD,UAAU,mCAAmC,UAE7CV,IAAOQ,EACb/C,EAAMiD,UAAU,mCAAmC,YAGnDT,EAAQO,GACR/C,EAAMiD,UAAU,gCAAgC,cAmBwB,eACvEhD,IAAAC,cAAA,UAAQe,UAAU,4BAA4Bc,QAtC1B,WAGrBS,EADY,IAEZxC,EAAMiD,UAAU,aAAa,aAkC6C,cACzEhD,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,WAAMqC,EAAKY,MAAM,KAAKC,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQC,UAAaA,OAAO,cAAYf,EAAKe,OAAO,eACpGrD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAW,KAAPqC,EAAU,6CAA6CA,MDrBpEf,EAAO+B,aAAa,CAChB7B,MAAO,U,WEiCI8B,MAhEf,WAIE,IAAArB,EAAqBC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAA/BsB,EAAIpB,EAAA,GAACqB,EAAOrB,EAAA,GAkBnBsB,EAAuBvB,mBAAS,MAAKwB,EAAAtB,YAAAqB,EAAA,GAA9BtD,EAAKuD,EAAA,GAACC,EAAQD,EAAA,GAEfE,EAAU,SAACC,EAAQvD,GACnBqD,EAAS,CACPnD,IAAIqD,EACJvD,KAAKA,IAEPwD,YAAW,WACTH,EAAS,QACR,MAGT,OACE5D,IAAAC,cAAAD,IAAAwC,SAAA,KACCxC,IAAAC,cAAC+D,IAAa,KAEdhE,IAAAC,cAACsB,EAAM,CAACE,MAAM,QAAQZ,KAAM2C,EAAMzB,WAhCpB,WACL,UAAPyB,GACDC,EAAQ,QACRQ,SAASC,KAAKhE,MAAMY,gBAAkB,UACtC+C,EAAU,mBAAmB,WAC7BI,SAASxC,MAAM,+BAGfgC,EAAQ,SACRQ,SAASC,KAAKhE,MAAMY,gBAAkB,QACtC+C,EAAU,oBAAoB,UAC9BI,SAASxC,MAAM,gCAqB0CrB,MAAOA,IACjEJ,IAAAC,cAACH,EAAK,CAACM,MAAOA,IACdJ,IAAAC,cAAA,OAAKe,UAAU,aAEZhB,IAAAC,cAACkE,IAAM,KACHnE,IAAAC,cAACmE,IAAK,CAACC,KAAK,SAASjB,QAASpD,IAAAC,cAACS,EAAK,CAACG,KAAM2C,MAM5CxD,IAAAC,cAACmE,IAAK,CAACC,KAAK,IAAIjB,QAASpD,IAAAC,cAACgC,EAAQ,CAACe,UAAWa,EAAWhD,KAAM2C,WCjD3Dc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCDDS,IAASC,WAAWhB,SAASiB,eAAe,SACpDC,OACHnF,IAAAC,cAACD,IAAMoF,WAAU,KACfpF,IAAAC,cAACsD,EAAG,QAORe,M","file":"static/js/main.9979d9a4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    <div style={{height:\"70px\"}}>\r\n   {props.alert && <div>\r\n      <div class={`alert alert-${props.alert.type}`} role=\"alert\">\r\n        {props.alert.msg}\r\n    </div>\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from \"react\"\r\nimport React from 'react'//rcf\r\n\r\nexport default function About(props) {\r\n    // const [Mystyle,setMystyle]=useState({\r\n    //     color:'red',\r\n    //     backgroundcolor:'black'\r\n    // })\r\n    let Mystyle={\r\n        color: props.mode==='dark'?'white':'black',\r\n        backgroundColor : props.mode==='dark'?'#0b5871':'white'\r\n    }\r\n    // const [Mystyle,setMystyle]=useState({\r\n    //     color:'black',\r\n    //     backgroundColor:'white'\r\n    // })\r\n    // const [btnMode,setbtnMode]=useState('DarkMode');\r\n    // const DarkLight=()=>{\r\n    //     if(Mystyle.color===\"black\"){\r\n    //         setMystyle({\r\n    //             color:'white',\r\n    //             backgroundColor:'black'\r\n    //         });\r\n    //         setbtnMode('LightMode');\r\n    //      }\r\n    //      else{\r\n    //         setMystyle({\r\n    //             color:'black',\r\n    //             backgroundColor:'white'\r\n    //         });\r\n    //         setbtnMode('DarkMode');\r\n    //      }\r\n    // }\r\n  return (\r\n    <div style={{border : \"3px solid\", color:props.mode==='dark'?'white':'black'}}>\r\n      <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\" style={Mystyle}>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button style={Mystyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" style={Mystyle} data-bs-parent=\"#accordionFlushExample\">\r\n            <div className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> className. This is the first item's accordion body.</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button style={Mystyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n            <div style={Mystyle} className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> className. This is the second item's accordion body. Let's imagine this being filled with some actual content.</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button style={Mystyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseThree\" aria-expanded=\"false\" aria-controls=\"flush-collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n            <div style={Mystyle} className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> className. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.</div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n      {/* <button onClick={DarkLight} className=\"btn btn-primary my-4 mx-2\">{btnMode}</button> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react' //rfc\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a> \r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                </li>\r\n                </ul>\r\n                <div className=\"form-check form-switch\">\r\n                  <input className=\"form-check-input\" onClick={props.ToggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                  <label className={`form-check-label text-${props.mode==='light'?'dark':'light'} `} htmlFor=\"flexSwitchCheckDefault\">Enable Blue Mode</label>\r\n                </div>\r\n                {/* <form className=\"d-flex\" role=\"search\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n            </div>\r\n            </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title: 'Aarsh2'\r\n}\r\n\r\n","import { useState } from \"react\"\r\nimport React  from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpclick = () =>{\r\n        // console.log(\"Hello\");\r\n        let newtext=text.toUpperCase();\r\n        if(newtext===\"\"){\r\n          props.showAlert(\"Please Enter the text in Textbox\",\"danger\");\r\n        }\r\n        else if(text===newtext){\r\n          props.showAlert(\"Text Already in UperCase buddy!\",\"primary\");\r\n        }\r\n        else{\r\n          setText(newtext);\r\n          props.showAlert(\"Text Converted into UperCase\",\"success\");\r\n        }\r\n    }\r\n\r\n    const handleClearclick = () =>{\r\n        // console.log(\"Hello\");\r\n        let newtext='';\r\n        setText(newtext);\r\n        props.showAlert(\"Text Clear\",\"success\");\r\n    }\r\n\r\n    const handlelowclick = () =>{\r\n      // console.log(\"Hello\");\r\n      let newtext=text.toLowerCase();\r\n      if(newtext===\"\"){\r\n        props.showAlert(\"Please Enter the text in Textbox\",\"danger\");\r\n      }\r\n      else if(text===newtext){\r\n        props.showAlert(\"Text Already in LowerCase buddy!\",\"primary\");\r\n      }\r\n      else{\r\n        setText(newtext);\r\n        props.showAlert(\"Text Converted into LowerCase\",\"success\");\r\n      }\r\n      \r\n  }\r\n\r\n    const handleUpchange = (event) =>{\r\n        // console.log(\"Hello\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText]= useState('Enter Text here');\r\n  return (\r\n    <>\r\n    <div>\r\n    <div className=\"mb-3 container\" style={{color: props.mode==='dark'?'white':'black'}}>{/*ternary operator just like if-else and use {{}} to write style in React JS*/}\r\n    <h1>Enter the text to analyze below</h1><br/>\r\n        {/* <label for=\"exampleFormControlTextarea1\" className=\"form-label\">Example textarea</label> */}\r\n         <textarea className=\"form-control\" value={text} onChange={handleUpchange} id=\"exampleFormControlTextarea1\" rows=\"3\" style={{color: props.mode==='dark'?'white':'black',backgroundColor: props.mode==='dark'?'#0b5871':'white'}}></textarea>\r\n         <br></br>\r\n         <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpclick}>ToUpperCase</button>\r\n         <button className=\"btn btn-primary mx-1 my-1\" onClick={handlelowclick}>ToLowerCase</button>\r\n         <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearclick}>Clear Text</button>\r\n         <br/><br/>\r\n         <h2>Your text summery</h2>\r\n         <div>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} Characters</div>\r\n         <h2>Preview</h2>\r\n         <p>{text===\"\"?\"Enter Something in the Textbox for Preview\":text}</p>\r\n    </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport Alert from './Components/Alert';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport {useState} from 'react';\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n// import { BrowserRouter as Router, Switch, Routes, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  //Dark-Light Mode\n  //Use Mode to print value of variable and use setMode for change or assign the value for the variable\n  //Use {} to use React js Variable in HTML\n  const [Mode,SetMode]=useState('light');\n\n  const toggleMode=()=>{\n    if(Mode==='light'){\n      SetMode('dark');\n      document.body.style.backgroundColor = '#0b5871';\n      ShowAlert(\"Dark mode Enable\",\"success\")\n      document.title=\"TextUtils Home - Dark Mode\";\n    }\n    else{\n      SetMode('light');\n      document.body.style.backgroundColor = 'White';\n      ShowAlert(\"Light mode Enable\",\"danger\")\n      document.title=\"TextUtils Home - Light Mode\";\n    }\n  }\n\n  //Alert\n  const [alert,setalert]=useState(null);\n\n  const ShowAlert=(message,type)=>{\n        setalert({\n          msg:message,\n          type:type\n        })\n        setTimeout(() => {\n          setalert(null);\n        }, 2000);\n  }\n\n  return (\n    <>   \n     <BrowserRouter> \n    {/* pass the value as a props(mode)  also pass the arrow function*/}\n     <Navbar title=\"Aarsh\" mode={Mode} ToggleMode={toggleMode} alert={alert}/> \n     <Alert alert={alert}/>\n     <div className=\"container\">\n    \n        <Routes>\n            <Route path=\"/about\" element={<About mode={Mode}/>}>\n            {/* <About />    */}\n            </Route>\n            {/* <Route path=\"/\">\n            <Users />\n          </Route>  */}\n           <Route path=\"/\" element={<Textform showAlert={ShowAlert} mode={Mode}/>}>\n            {/* <Textform showAlert={ShowAlert} mode={Mode}/> */}\n            {/* <Home /> */}\n           </Route>\n        </Routes>\n        </div>\n        </BrowserRouter>\n        \n      \n        \n      {/* <Navbar/> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}